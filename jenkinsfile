pipeline {
    agent any

    environment {
        DOCKER_HUB_CREDENTIALS = credentials('dockerhub')
    }

    stages {
        stage('Checkout Source') {
            steps {
                script {
                    // Git 소스 코드 체크아웃
                    checkout scm
                }
            }
        }

        stage('Build JAR') {
            steps {
                sh './gradlew clean bootJar'
            }
        }

        stage('Docker Login') {
            steps {
                script {
                    // Docker Hub 로그인
                    withCredentials([usernamePassword(credentialsId: "${DOCKER_HUB_CREDENTIALS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh """
                            echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USER" --password-stdin
                        """
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // 버전 태그 생성
                    def imageTag = "danjam-service:${BUILD_NUMBER}"
                    echo "Building Docker image with tag: ${imageTag}"

                    // Docker 이미지 빌드
                    sh "docker build -t ${DOCKER_USER}/danjam-service:${BUILD_NUMBER} ."
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    def imageTag = "danjam-service:${BUILD_NUMBER}"
                    echo "Pushing Docker image: ${imageTag}"

                    // Docker 이미지 푸시
                    sh "docker push ${DOCKER_USER}/danjam-service:${BUILD_NUMBER}"
                }
            }
        }

        stage('Build and Run Docker Containers') {
            steps {
                script {
                    sh 'docker-compose down || true'
                    // Docker Compose 실행
                    sh "docker-compose up --build -d"
                }
            }
        }
    }

    post {
        always {
            // 정리 작업
            cleanWs()
        }
    }
}
